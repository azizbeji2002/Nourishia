{% extends 'base.html.twig' %}

{% block title %}Ajouter un nouveau post{% endblock %}

{% block body %}
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-lg border-0 rounded-4 animate__animated animate__fadeInUp" style="background: linear-gradient(135deg, #e3f2fd, #bbdefb);">
                    <div class="card-header bg-primary text-white text-center rounded-top-4 animate__animated animate__fadeInDown">
                        <h2 class="mb-0"><i class="fas fa-plus-circle"></i> Ajouter un Post</h2>
                    </div>
                    <div class="card-body p-5 animate__animated animate__fadeInUp animate__delay-1s">
                        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'postForm'}}) }}

                        {% for field in form %}
                            {% if field.vars.name != '_token' %}
                                <div class="mb-4 animate__animated animate__fadeInUp animate__delay-2s">
                                    {{ form_label(field, null, {'label_attr': {'class': 'form-label text-secondary fw-semibold'}}) }}
                                    <div class="position-relative">
                                        {{ form_widget(field, {'attr': {
                                            'class': 'form-control form-control-lg border-2 rounded-3 input-effect',
                                            'oninput': 'validateField(this)',   # Appel de la fonction JS
                                            'required': 'required'
                                        }}) }}
                                        <span class="focus-border"></span>
                                    </div>

                                    {# Message d'erreur dynamique #}
                                    <div class="invalid-feedback d-block" style="display: none;">
                                        Ce champ est obligatoire.
                                    </div>
                                    <div class="error-message" style="display: none;"></div>
                                </div>
                            {% endif %}
                        {% endfor %}

                        <div class="text-center animate__animated animate__pulse animate__infinite animate__delay-3s">
                            <button type="submit" class="btn btn-lg btn-primary text-white px-5 py-2 rounded-pill btn-glow animate__animated animate__bounceIn animate__delay-2s">
                                <i class="fas fa-paper-plane"></i> Publier
                            </button>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Styles de base */
        .input-effect {
            transition: all 0.3s ease-in-out;
        }

        /* Champ valide (vert) */
        .form-control.is-valid {
            border-color: green !important;
            box-shadow: 0px 0px 10px rgba(0, 255, 0, 0.3);
        }

        /* Champ invalide (rouge) */
        .form-control.is-invalid {
            border-color: red !important;
            box-shadow: 0px 0px 10px rgba(255, 0, 0, 0.3);
        }

        /* Message d'erreur visible */
        .invalid-feedback {
            color: red;
            font-size: 0.875em;
            margin-top: 5px;
        }

        .error-message {
            color: orange;
            font-size: 0.875em;
            margin-top: 5px;
        }
    </style>

    <script>
        // Fonction de validation pour chaque champ
        function validateField(input) {
            let errorMessage = input.parentElement.nextElementSibling; // Sélection du message d'erreur
            let errorDiv = input.parentElement.nextElementSibling.nextElementSibling; // Div pour les messages d'erreur personnalisés

            // Vérification si le champ est vide
            if (input.value.trim() === '') {
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
                errorMessage.style.display = 'block'; // Afficher l'erreur obligatoire
                errorDiv.style.display = 'none'; // Cacher les erreurs spécifiques
            } else {
                // Validation supplémentaire selon le type de champ
                if (input.type === 'email' && !validateEmail(input.value)) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                    errorMessage.style.display = 'none';
                    errorDiv.textContent = 'Le format de l\'email est incorrect.';
                    errorDiv.style.display = 'block';
                } else if (input.type === 'text' && input.value.length < 3) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                    errorMessage.style.display = 'none';
                    errorDiv.textContent = 'Le texte est trop court.';
                    errorDiv.style.display = 'block';
                } else {
                    input.classList.add('is-valid');
                    input.classList.remove('is-invalid');
                    errorMessage.style.display = 'none';
                    errorDiv.style.display = 'none';
                }
            }
        }

        // Fonction de validation pour les emails
        function validateEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        // Validation lors de la soumission du formulaire
        document.getElementById("postForm").addEventListener("submit", function(event) {
            let fields = document.querySelectorAll(".form-control");
            let hasError = false;

            fields.forEach(function(field) {
                validateField(field);
                if (field.classList.contains('is-invalid')) {
                    hasError = true;
                }
            });

            if (hasError) {
                event.preventDefault(); // Empêcher l'envoi si erreur
                document.querySelector('.is-invalid').scrollIntoView({ behavior: "smooth", block: "center" });
            }
        });
    </script>

    <!-- Ajout d'Animate.css pour l'animation -->
    <link href="https://cdn.jsdelivr.net/npm/animate.css@4.1.1/animate.min.css" rel="stylesheet">
{% endblock %}
